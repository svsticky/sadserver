---
- name: "ensure koala system user exists"
  user:
    name: "koala"
    state: "present"
    system: true
    shell: "/bin/bash"
  notify: "restart koala"
  tags:
    - "ruby"
    - "koala"

- name: "ensure koala database user exists"
  command:
    "mysql -NBe 'grant all privileges on `koala{% if koala_env.environment ==
    'development' %}-development{% endif %}`.* to `koala`@`localhost`
    identified via unix_socket;'"
  tags:
    - "database"
    - "koala"

- name: "ensure clone location exists and is owned by koala"
  file:
    path: "/var/www/koala.{{ canonical_hostname }}"
    state: "directory"
    owner: "koala"
    group: "koala"
    recurse: true
  tags:
    - "koala"

- name: "ensure ruby compilation dependencies are installed"
  apt:
    name:
      - "autoconf"
      - "bison"
      - "build-essential"
      - "libssl-dev"
      - "libyaml-dev"
      - "libreadline-dev"
      - "libncurses5-dev"
      - "libffi-dev"
      - "libgdbm5"
      - "libgdbm-dev"
      - "mupdf-tools"
      - "nodejs"
      - "zlib1g-dev"
      - "imagemagick"
      - "libmariadb-client-lgpl-dev-compat"
      - "acl"
      - "git"
    state: "present"
  tags:
    - "packages"
    - "ruby"
    - "koala"
  notify: "restart koala"

- name: "add apt key for yarn repository"
  apt_key:
    url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
    state: "present"

- name: "add yarn repository"
  apt_repository:
    repo: "deb https://dl.yarnpkg.com/debian/ stable main"
    state: "present"

- name: "install yarn"
  apt:
   name: "yarn"
   state: "present"
  notify: "restart koala"

- name: "ensure koala service file is present"
  template:
    src: "templates/{{ path }}.j2"
    dest: "/{{ path }}"
  vars:
    path: "etc/systemd/system/koala.service"
  notify:
    - "systemctl daemon-reload"
    - "restart koala"

# As koala:
- block:
  # Only ensure repository is cloned, don't checkout yet
  - name: "clone repository of rbenv + plugins"
    git:
      repo: "https://github.com/rbenv/{{ item.repo }}.git"
      dest: "{{ item.install_path }}"
      update: false
    diff: false
    with_items: "{{ koala.dependencies }}"

  - name: "retrieve all version numbers of rbenv + plugins"
    shell: "git fetch --tags"
    args:
      chdir: "{{ item.install_path }}"
    register: "rbenv_fetch"
    changed_when: rbenv_fetch.stdout != ""
    with_items: "{{ koala.dependencies }}"
    loop_control:
      label: "{{ item.repo }}"

  - name: "determine latest version number of rbenv + plugins"
    shell: "git describe --tags $(git rev-list --tags --max-count=1)"
    args:
      chdir: "{{ item.install_path }}"
    register: "rbenv_versions"
    # The next task already shows if there is actually a change
    changed_when: false
    with_items: "{{ koala.dependencies }}"
    loop_control:
      label: "{{ item.repo }}"

  # Wrapped in block because otherwise templating is done before skipping task,
  # which will fail in check mode
  - block:
    - name: "install newest release of rbenv + plugins"
      git:
        repo: "https://github.com/rbenv/{{ item.0.repo }}"
        dest: "{{ item.0.install_path }}"
        version: "{{ item.1.stdout }}"
      diff: false
      when:
      # List is evaluated as logical AND
      # Don't run in check mode because previous "git fetch" task also can't be
      # run in check mode
      - not ansible_check_mode
      - item.1.item.repo == item.0.repo
      with_nested:
        - "{{ koala.dependencies }}"
        - "{{ rbenv_versions.results }}"
      loop_control:
        label: "{{ item.0.repo }}"
      notify: "restart koala"

  - name: "ensure environment variables are set in .bashrc"
    blockinfile:
      dest: "/home/koala/.bashrc"
      insertafter: "EOF"
      create: true
      block: |
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init -)"
    notify: "restart koala"
    tags:
      - "koala"
      - "ruby"

  - name: "ensure koala has a ssh directory"
    file:
      path: "~/.ssh"
      state: "directory"
    tags:
      - "koala"

  - name: "copy deploy key (private) for user koala"
    copy:
      content: "{{ secret_deploy_key }}"
      dest: "/home/koala/.ssh/id_ed25519"
      mode: "0600"

  # This checks if Koala is already locally present, and if there is an update
  # on the remote
  - name: "check status of koala's local git repo"
    git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala_env.git_ref }}"
    diff: false
    register: "koala_checkout_result"
    check_mode: true

  # This sets the information gained from the previous task in a fact
  - name: "set status of koala repo in fact"
    set_fact:
      koala_updated: true
    when:
      # List is evaluated as logical AND
      - koala_checkout_result.changed
      - koala_checkout_result.before != None

  # Enables maintenance mode only when Koala was already running, and needs to
  # be updated
  - name: "start process of enabling koala's maintenance mode"
    include_tasks: "playbooks/koala/.maintenance-on.yml"
    when: koala_updated | default(false)

  - name: "clone koala to /var/www/koala.{{ canonical_hostname }}"
    git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala_env.git_ref }}"
    diff: false
    when: koala_checkout_result.changed
    tags:
      - "koala"

  - name: "ensure ruby is installed, compile if necessary"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: >
      eval "$(rbenv init - )";
      rbenv install --skip-existing
    args:
      executable: "/bin/bash"
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "ruby_install_result"
    changed_when: "ruby_install_result.stdout != ''"
    notify: "restart koala"
    tags:
      - "ruby"
      - "koala"

  - name: "ensure rubygems is updated"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: >
      eval "$(rbenv init -)";
      gem update --system
    args:
      executable: "/bin/bash"
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "rubygems_update"
    changed_when:
      "'Latest version already installed.' not in
      rubygems_update.stdout"

  - name: "ensure .rbenv-vars is present"
    template:
      src: "templates/var/www/koala/.rbenv-vars.j2"
      dest: "/var/www/koala.{{ canonical_hostname }}/.rbenv-vars"
      mode: "0700"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "get bundled_with bundler version"
    shell:
      cmd: "tail -n 1 Gemfile.lock | awk '{$1=$1};1'"
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "koala_bundler_version"

  - name: "ensure the right bundler version is installed"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: >
      eval "$(rbenv init - )";
      gem install bundler -v {{ koala_bundler_version.stdout }}
    args:
      executable: "/bin/bash"
      chdir: "/var/www/koala.{{ canonical_hostname }}"

  - name: "ensure gem dependencies are installed"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; bundle install'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "koala_gem_result"
    changed_when: "'Installing' in koala_gem_result.stdout"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "ensure tmp directories exist"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; rails tmp:create'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      creates: "/var/www/koala.{{ canonical_hostname }}/tmp"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "ensure log directory exists"
    file:
      path: "/var/www/koala.{{ canonical_hostname }}/log"
      state: "directory"
      mode: "0775"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "ensure assets are precompiled"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; rails assets:precompile'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "koala_assets_result"
    changed_when: koala_assets_result.stdout.find("Already up-to-date.") == -1
    notify: "restart koala"

  - name: "add credentials for oauth application"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; rails oauthproxy:create_application'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"

    # This block only runs when Koala was already present, and needs to be
    # updated. Makes a backup of Koala's db before performing any operations on
    # the db.
  - block:
      - name: "make pre-upgrade database backup to S3"
        systemd:
          name: "backup-databases.service"
          state: "started"
        become_user: "root"

      - name: "run migration(s)"
        environment:
          PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
        shell:
          'eval "$(rbenv init - )"; bin/rails
          RAILS_ENV={{ koala_env.environment }} db:migrate'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"
          executable: "/bin/bash"
    when: koala_updated | default(false)
    become: true
    become_user: "koala"

  # Disables maintenance mode only when Koala had to be updated, and can now be
  # started again.
  - name: "start process of disabling koala's maintenance mode"
    include_tasks: "playbooks/koala/.maintenance-off.yml"
    when: koala_updated | default(false)

  become: true
  become_user: "koala"

- name: "ensure koala's recurring services+timers are present"
  template:
    src: "templates/etc/systemd/system/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "koala-check-study-year.service"
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.service"
    - "koala-clean-users-table.timer"
    - "koala-reindex-search.service"
    - "koala-reindex-search.timer"
  notify:
    - "systemctl daemon-reload"

- name: "flush handlers"
  meta: "flush_handlers"

- name: "ensure koala's timers are started and enabled in production"
  service:
    name: "{{ item }}"
    enabled:
      "{% if 'staging' in group_names %}false{% else %}true\
      {% endif %}"
    state:
      "{% if 'staging' in group_names %}stopped{% else %}started{% endif %}"
  with_items:
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.timer"
    - "koala-reindex-search.timer"

# This task is used when you set koala.server to "webrick". Useful when you
# want to use this playbook for a development server, instead of
# staging|production.
- name: "ensure webrick script is present in development"
  template:
    src: "templates/{{ path }}.j2"
    dest: "/{{ path }}"
    mode: "0755"
    owner: "koala"
    group: "koala"
  vars:
    path: "home/koala/webrick.sh"
  when: koala.server == "webrick"
  tags:
    - "koala"

- block:
  - name: "ensure unicorn script is present in production"
    template:
      src: "templates/{{ path }}.j2"
      dest: "/{{ path }}"
      mode: "0755"
      owner: "koala"
      group: "koala"
    vars:
      path: "home/koala/unicorn.sh"
    notify: "restart koala"

  - name: "place koala's nginx configuration"
    template:
      src: "templates/etc/nginx/sites-available/koala.j2"
      dest: "/etc/nginx/sites-available/koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  - name: "enable koala's nginx config"
    file:
      src: "/etc/nginx/sites-available/{{ filename }}"
      path: "/etc/nginx/sites-enabled/{{ filename }}"
      state: "link"
    vars:
      filename: "koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  when: koala.server == "unicorn"
  tags:
    - "koala"
