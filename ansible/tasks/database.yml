---
# Contains application-agnostic database tasks
- block:
  - name: "ensure mariadb is installed and manageable"
    apt:
        name: "{{ item }}"
        state: "present"
    with_items:
        - "mariadb-server"
        - "python-mysqldb"
    tags:
        - "packages"

  - name: "create folder for mariadb override"
    file:
      path: "/etc/systemd/system/mysql.service.d"
      state: "directory"
    notify: "systemctl daemon-reload"

  - name: "override parameters of mariadb service"
    template:
      src: "templates/{{ override_path }}.j2"
      dest: "/{{ override_path }}"
    vars:
      override_path: "etc/systemd/system/mysql.service.d/override.conf"
    notify: "systemctl daemon-reload"

  - name: "ensure database is enabled and running"
    service:
        name: "mysql"
        enabled: true
        state: "started"
    tags:
        - "service"

  - name: "configure root MariaDB account and delete test database"
    command: "mysql -NBe '{{ item }}'"
    with_items:
      - "grant all privileges on *.* to `root`@`localhost` identified via
        unix_socket with grant option;"
      - "drop database if exists test;"

  - name: "create website databases"
    command: "mysql -NBe 'create database if not exists {{ item.database }};'"
    with_items: "{{ websites }}"
    when:
      # List is evaluated as logical AND
      - item.state == "present"
      - item.database is defined
    loop_control:
      label: "{{ item.name }}"

  # TODO: cut permission scope?
  - name: "create website database users"
    # Using the bracket syntax to refer to the dict, in order to dynamically
    # construct variable names. Link:
    # https://stackoverflow.com/questions/40774205/ansible-nested-variables-in-
    # template
    command: >
      mysql -NBe 'grant all privileges on {{ item.database }}.* to
      `{{ item.database }}`@`localhost` identified via mysql_native_password
      using "{{ secret_mysql[item.database]['hash'] }}";'
    with_items: "{{ websites }}"
    when:
      # List is evaluated as logical AND
      - item.state == "present"
      - item.database is defined
    loop_control:
      label: "{{ item.name }}"

  tags:
    - "database"
