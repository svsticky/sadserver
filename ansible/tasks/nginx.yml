---
- name: "install nginx, php-fpm and openssl"
  apt:
    name: "{{ item }}"
    state: "present"
  with_items:
    - "nginx"
    - "php-fpm"
    - "openssl"

- name: "copy configuration files for nginx and php"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items:
    - "etc/nginx/nginx.conf"
    - "etc/ssl/certs/letsencrypt-ocsp-chain.pem"
    - "etc/php/7.0/fpm/php.ini"

- name: "ensure stock nginx configuration is not present"
  file:
    path: "/etc/nginx/{{ item }}"
    state: "absent"
  with_items:
    - "sites-available/default"
    - "sites-enabled/default"

- name: "copy dhparams and default nginx configuration"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items:
    - "etc/nginx/dhparams.pem"
    - "etc/nginx/sites-available/default.conf"

- name: "enable default nginx config"
  file:
    src: "/etc/nginx/sites-available/default.conf"
    dest: "/etc/nginx/sites-enabled/default.conf"
    state: "link"

# This enables the nginx service, and reloads
# or starts it if necessary. Let's Encrypt depends
# on this.
- name: "enable, start and reload/start nginx"
  service:
    name: "nginx"
    enabled: true
    state: "reloaded"

- name: "Delete default html directory"
  file:
    path: "/var/www/html"
    state: "absent"

# We need this, because certbot is still at
# 0.4.x in the xenial repo as of 2017-02-06
- name: "add certbot apt repository"
  apt_repository:
    repo: "ppa:certbot/certbot"

- name: "install certbot"
  apt:
    name: "certbot"
    state: "latest"

# This will be used by all websites that
# need a certificate
- name: "create acme-challenges directory"
  file:
    path: "/var/www/acme-challenges"
    state: "directory"
    owner: "root"
    group: "www-data"
    # The 2xxx octal means the group setuid bit is set, meaning
    # all files that get created in this directory will have
    # the group `www-data`
    mode: "2750"

- name: "create folders for certbot renewal override"
  file:
    path: "/etc/systemd/system/{{ item }}"
    state: "directory"
  with_items:
    - "certbot.service.d"
    - "certbot.timer.d"

- name: "override parameters of certbot's renewal service+timer"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items:
    - "etc/systemd/system/certbot.service.d/override.conf"
    - "etc/systemd/system/certbot.timer.d/override.conf"
    - "etc/systemd/system/certbot-fail.service"
  notify: "systemctl daemon-reload"

- name: "request certificates"
  # --staging should be removed when deploying in production
  # --non-interactive makes sure command never waits for user input
  # --keep-until-expiring makes sure cert only gets renewed when cert is actually close to expiring
  # --expand enables adding more SAN's to the same cert lineage later on
  # --must-staple sets flag in cert for mandatory stapled OCSP response
  # --webroot sets domain validation method
  # --domain adds main hostname of a website as CN and SAN, and all alternative hostnames as SAN's
  command: >
    certbot certonly
    {% if staging_certificates and (item.real_certificate is not defined or item.real_certificate == false) %}
    --staging
    {% endif %}
    --non-interactive
    --agree-tos
    --email "itcrowd@svsticky.nl"
    --keep-until-expiring
    --expand
    --must-staple
    --webroot
    --webroot-path /var/www/acme-challenges
    --domain {{ item.name }}
    {% for hostname in item.alternative_names %}
    --domain {{ hostname }}
    {% endfor %}
  with_items: "{{ websites }}"

- name: "create website directories"
  file:
    path: "/var/www/{{ item.user }}/{{ item.name }}"
    owner: "{{ item.user }}"
    group: "www-data"
    mode: "0755"
    state: "directory"
  with_items: "{{ websites }}"
  when: item.custom_config is undefined

- name: "create nginx includes directory"
  file:
    dest: "/etc/nginx/includes"
    state: "directory"

- name: "copy nginx include files"
  template:
    src: "templates/etc/nginx/includes/{{ item }}.j2"
    dest: "/etc/nginx/includes/{{ item }}"
  with_items:
    - "security-headers.conf"
    - "php-parameters.conf"

- name: "copy nginx configurations for regular websites"
  template:
    src: "templates/etc/nginx/sites-available/website.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item.name }}.conf"
  with_items: "{{ websites }}"
  when: item.custom_config is undefined

- name: "copy nginx configuration for savadaba.nl"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items: "etc/nginx/sites-available/savadaba.nl.conf"

- name: "enable regular nginx configurations"
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.name }}.conf"
    state: "link"
  with_items: "{{ websites }}"
  when: item.custom_config is undefined
  notify: "reload nginx"

# Commented out because of DNS, uncomment when in
# production
# - name: "enable nginx configuration for savadaba.nl"
#   file:
#     src: "/etc/nginx/sites-available/{{ item }}"
#     dest: "/etc/nginx/sites-enabled/{{ item }}"
#     state: "link"
#   with_items: "savadaba.nl.conf"
#   notify: "reload nginx"

- name: "create htpasswd.d directory for basic auth files"
  file:
    dest: "/etc/nginx/htpasswd.d"
    state: "directory"
