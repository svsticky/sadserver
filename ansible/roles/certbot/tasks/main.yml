---

- name: "install certbot"
  ansible.builtin.apt:
    name: "certbot"
    state: "latest"

# This directory will be used to validate all websites that need a certificate
- name: "create acme-challenges directory"
  ansible.builtin.file:
    path: "/var/www/acme-challenges"
    state: "directory"
    owner: "root"
    group: "www-data"
    # The 2xxx octal means the group setuid bit is set, meaning all files that
    # get created in this directory will have the group `www-data`.
    mode: "2750"

- name: "create folders for certbot renewal override"
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ item }}"
    state: "directory"
  with_items:
    - "certbot.service.d"
    - "certbot.timer.d"

- name: "place onfailure override"
  ansible.builtin.template:
    src: "onfailure.conf.j2"
    dest: "/etc/systemd/system/certbot.service.d/onfailure.conf"
  notify: "systemctl daemon-reload"

- name: "override parameters of certbot's renewal service+timer"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "certbot.service.d/override.conf"
    - "certbot.timer.d/override.conf"
  notify: "systemctl daemon-reload"

- name: "make sure nginx is reloaded if needed"
  ansible.builtin.meta: "flush_handlers"

- name: "request certificates"
  # --non-interactive makes sure command never waits for user input
  # --keep-until-expiring makes sure cert only gets renewed when cert is
  # actually close to expiring
  # --expand enables adding more SAN's to the same cert lineage later on
  # --webroot sets domain validation method
  # --domain adds main hostname of a website as CN and SAN, and all alternative
  # hostnames as SAN's
  # --deploy-hook reloads nginx after a successful issuance, and adds this in
  # the renewal configuration of the certificate
  ansible.builtin.command: >-
    certbot certonly
    --non-interactive
    --agree-tos
    --email "domreg@svsticky.nl"
    --keep-until-expiring
    --cert-name {{ item.name }}
    --webroot
    --webroot-path /var/www/acme-challenges
    --domain {{ item.name }}
    {% if 'staging' not in group_names %}
    {% for hostname in item.alternative_names %}
    --domain {{ hostname }}
    {% endfor %}
    {% endif %}
    --deploy-hook "systemctl reload nginx"
  with_items: "{{ websites }}"
  register: "certbot_output"
  changed_when: "'no action taken' not in certbot_output.stdout"
  when: item.state == "present"
  loop_control:
    label: "{{ item.name }}"

- name: "ensure certbot timer is started"
  ansible.builtin.service:
    name: "certbot.timer"
    enabled: true
    state: "started"
