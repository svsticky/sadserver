---
# Possible variables which can be set to change the behaviour of these tasks:
# - project_source (required): the path to the directory the compose file is in
# - remove_images: whether to remove and rebuild all used images while composing up.
#                  Leave unset to keep the images, otherwise use "local" or "all"
# - compose_file: the name of the compose file to use, if not "docker-compose.yml"

- name: "Check if 'project_source' is defined"
  ansible.builtin.fail:
    msg: "You forgot to specify the path to the docker compose project"
  when: "project_source is undefined"

- name: "Assert that Docker daemon is active, but do not start it"
  ansible.builtin.systemd_service:
    name: "docker"
    state: "started"
  check_mode: true
  register: "docker_status"

- name: "Exit if docker is not running"
  ansible.builtin.fail:
    msg: "Docker deamon is not running"
  when: "docker_status.status.ActiveState != 'active'"

- name: "Tear down existing services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    files:
      - "{{ compose_file | default(omit) }}"
    state: "absent"
    remove_images: "{{ remove_images | default(omit) }}" # NOTE: can give the warning that nothing is to be removed, if nothing exists yet (and thus expected)

- name: "Create and start services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    files:
      - "{{ compose_file | default(omit) }}"
  register: "output"

# - name: Show results
#   ansible.builtin.debug:
#     var: output

- name: "Run `docker compose up` again"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    files:
      - "{{ compose_file | default(omit) }}"
  register: "output"

- name: "Assert that all services properly started, and that the docker compose file is idempotent"
  ansible.builtin.assert:
    that: "not output.changed"

# Remember what services are included in the compose file, for later
- name: "Extract service names from output"
  ansible.builtin.set_fact:
    docker_compose_service_names: "{{ output.containers | map(attribute='Name') | list }}"

# - name: Show docker results
#   ansible.builtin.debug:
#     var: output

# - name: Show parsed services
#   ansible.builtin.debug:
#     var: docker_compose_service_names

- name: "Stop all services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    files:
      - "{{ compose_file | default(omit) }}"
    state: "stopped"
  register: "output"

# - name: Show results
#   ansible.builtin.debug:
#     var: output

- name: "Verify that all containers stopped" # TODO how to verify all other services?
  ansible.builtin.assert:
    that:
      - "output.containers | selectattr('Name', 'equalto', item) | map(attribute='State') | list | first == 'exited'"
  loop: "{{ docker_compose_service_names }}"

- name: "Restart services and ensure they are healhty"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    files:
      - "{{ compose_file | default(omit) }}"
    state: "restarted"
    wait: true
    wait_timeout: 300
  register: "output"

# - name: Show results
#   ansible.builtin.debug:
#     var: output

- name: "Verify that all containers are running" # TODO how to verify all other services?
  ansible.builtin.assert:
    that:
      - "output.containers | selectattr('Name', 'equalto', item) | map(attribute='State') | list | first == 'running'"
  loop: "{{ docker_compose_service_names }}"
