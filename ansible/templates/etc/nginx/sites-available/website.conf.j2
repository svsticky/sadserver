# {{ ansible_managed }}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name
    {{ item.name }}{% for hostname in item.alternative_names %}

    {{ hostname }}{% endfor %};

  ssl_certificate      /etc/letsencrypt/live/{{ item.name }}/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/{{ item.name }}/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/{{ item.name }}/chain.pem;

  root /var/www/{% if item.user is defined %}{{ item.user }}/{% endif %}{{
item.name }};

  index {{ 'index.php' if (item.php_enabled | default(false)) else '' }}
    index.html index.htm;

  include includes/security-headers.conf;
{{ '  include includes/php-parameters.conf;' if (item.php_enabled |
default(false)) else '' }}

  {% if item.extra_includes is defined -%}
  {% for include in item.extra_includes %}include includes/{{ include }}.conf;
  {% endfor %}
  {% endif %}

  {% if item.custom_404 is defined and item.custom_404 and item.user is defined -%}
  error_page 404 /404.html;
  location = /404.html {
    root /var/www/{{ item.user }}/custom-errors;
    internal;
  }

  {% endif -%}

  location ~* /.git/ {
    deny all;
  }
{% if item.authenticated is defined and item.authenticated %}
  location /oauth2/ {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
  }
  location = /oauth2/auth {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
  }
{% endif %}

  location / {
{% if item.authenticated is defined and item.authenticated %}
    # Makes nginx check whether the user is logged in already
    auth_request /oauth2/auth;
    # If the user isn't logged in, redirect to the login page
    error_page 401 = /oauth2/start;

    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;
{% endif %}
    try_files $uri $uri/{{ ' /index.php?q=$uri&$args' if (item.php_enabled |
default(false)) else '' }} =404;
  }
}
