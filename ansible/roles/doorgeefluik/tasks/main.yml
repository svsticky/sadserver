---

- name: "download latest release"
  ansible.builtin.uri:
    url: "https://api.github.com/repos/svsticky/doorgeefluik/releases/latest"
    return_content: true
  register: "latest_doorgeefluik_release"
  # Don't skip this task in check mode: this makes the next step fail.
  check_mode: false

- name: "Set variables"
  ansible.builtin.set_fact:
    doorgeefluik_nix_path: "{{ lookup('url', latest_doorgeefluik_release.json.assets[0].browser_download_url) }}"

- name: "Ensure doorgeefluik user exists"
  ansible.builtin.user:
    name: "doorgeefluik"
    state: "present"
    system: true
    shell: "/bin/bash"
  notify: "restart doorgeefluik"

- name: "ensure database user exists"
  community.postgresql.postgresql_user:
    name: "doorgeefluik"
    role_attr_flags: "CREATEDB,LOGIN"
  become_user: "postgres"
  become: true

- name: "ensure database exists"
  community.postgresql.postgresql_db:
    name: "doorgeefluik"
    owner: "doorgeefluik"
  become_user: "postgres"
  become: true

- name: "ensure database user has the right privileges"
  community.postgresql.postgresql_privs:
    db: "doorgeefluik"
    role: "doorgeefluik"
    objs: "ALL_IN_SCHEMA"
    priv: "ALL"
  become_user: "postgres"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"

- name: "add cachix cache"
  ansible.builtin.command: "cachix use svsticky-doorgeefluik"

- name: "get the app from cachix"
  ansible.builtin.command:
    cmd: "nix-store --realize {{ doorgeefluik_nix_path }} --add-root ./deploy --indirect"
  become: true

- name: "Run the migrations"
  ansible.builtin.shell:
    cmd: "psql < {{ doorgeefluik_nix_path }}/lib/migrations/1637606752-initial-migration.sql"
  become: true
  become_user: "doorgeefluik"

- name: "Run the seed script"
  environment:
    DATABASE_URL: "postgresql:///doorgeefluik"
  ansible.builtin.command:
    cmd: "{{ doorgeefluik_nix_path }}/bin/SeedDatabase"
  become: true
  become_user: "doorgeefluik"

- name:
    "copy systemd service of doorgeefluik"
  ansible.builtin.template:
    src: "doorgeefluik.service.j2"
    dest: "/etc/systemd/system/doorgeefluik.service"
  notify: "restart doorgeefluik"

- name: "run doorgeefluik service"
  ansible.builtin.systemd:
    unit: "doorgeefluik.service"
    state: "started"
    enabled: true
    daemon-reload: true

- name: "place doorgeefluik's nginx configuration"
  ansible.builtin.template:
    src: "doorgeefluik.conf.j2"
    dest: "/etc/nginx/sites-available/{{ dest_filename }}"
  vars:
    dest_filename: "doorgeefluik.{{ canonical_hostname }}.conf"
  notify: "reload nginx"

- name: "enable doorgeefluik's nginx configuration"
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ filename }}"
    dest: "/etc/nginx/sites-enabled/{{ filename }}"
    state: "link"
  vars:
    filename: "doorgeefluik.{{ canonical_hostname }}.conf"
  notify: "reload nginx"
