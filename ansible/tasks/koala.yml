---
- name: "ensure koala system user exists"
  user:
    name: "koala"
    state: "present"
    system: true
    shell: "/bin/bash"
  notify: "restart koala"
  tags:
    - "ruby"
    - "koala"

- name: "ensure koala database user exists"
  command:
    "mysql -NBe 'grant all privileges on `koala{% if koala_env.environment ==
    'development' %}-development{% endif %}`.* to `koala`@`localhost`
    identified via mysql_native_password using
    \"{{ secret_mysql.koala.hash }}\";'"
  tags:
    - "database"
    - "koala"

- name: "ensure clone location exists and is owned by koala"
  file:
    path: "/var/www/koala.{{ canonical_hostname }}"
    state: "directory"
    owner: "koala"
    group: "koala"
    recurse: true
  tags:
    - "koala"

# This task can be deleted after it has been run once.
- name: "ensure ruby compilation dependencies are installed"
  apt:
    name:
      - "autoconf"
      - "bison"
      - "acl"
      - "libncurses5-dev"
      - "libgdbm-dev"
      - "libyaml-dev"
      - "libreadline-dev"
    state: "absent"
  tags:
    - "packages"
    - "ruby"
    - "koala"

- name: "ensure koala dependencies are installed"
  apt:
    name:
      - "imagemagick"
      - "git"
      - "nodejs"
      - "libgdbm5"
    state: "present"
  notify: "restart koala"

- name: "add apt key for yarn repository"
  apt_key:
    url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
    state: "present"

- name: "add yarn repository"
  apt_repository:
    repo: "deb https://dl.yarnpkg.com/debian/ stable main"
    state: "present"

- name: "install yarn"
  apt:
   name: "yarn"
   state: "present"
  notify: "restart koala"

- name: "add brightbox repository for ruby"
  apt_repository:
    repo: "ppa:brightbox/ruby-ng"
    state: "present"

- name: "ensure ruby is installed"
  apt:
    name:
      - "ruby{{ koala.ruby_version.major }}={{ koala.ruby_version.package }}"
      - "ruby{{ koala.ruby_version.major }}-dev={{ koala.ruby_version.package }}"
    state: "present"
  notify: "restart koala"
  tags:
    - "ruby"
    - "koala"

- name: "ensure gem build dependencies are installed"
  apt:
    name:
      - "build-essential"
      - "zlib1g-dev"
      - "liblzma-dev"
      - "libmysqlclient-dev"
    state: "present"

- name: "add symlink for ruby"
  file:
    path: "/usr/bin/ruby"
    src: "/usr/bin/ruby{{ koala.ruby_version.major }}"
    state: "link"

- name: "add symlink for bundler"
  file:
    path: "/usr/bin/bundle"
    src: "/usr/bin/bundle{{ koala.ruby_version.major }}"
    state: "link"

- name: "add symlink for gem"
  file:
    path: "/usr/bin/gem"
    src: "/usr/bin/gem{{ koala.ruby_version.major }}"
    state: "link"

- name: "ensure koala service file is present"
  template:
    src: "templates/{{ path }}.j2"
    dest: "/{{ path }}"
  vars:
    path: "etc/systemd/system/koala.service"
  notify:
    - "systemctl daemon-reload"
    - "restart koala"
# This task van be deleted after running once
- name: "delete rbenv specific files"
  file:
    path: "{{ item }}"
    state: "absent"
  with_items:
    - "/home/koala/.rbenv"
    - "/var/www/koala.{{ canonical_hostname }}/.rbenv-vars"

# Wrapped in block because otherwise templating is done before skipping task,
# which will fail in check mode
- block:
  - name: "ensure environment variables are set in .bashrc"
    blockinfile:
      dest: "/home/koala/.bashrc"
      insertafter: "EOF"
      create: true
      block: 'PATH="$HOME/.gem/ruby/{{ koala.ruby_version.full }}/bin:$PATH"'
    notify: "restart koala"

  - name: "ensure koala has a ssh directory"
    file:
      path: "/home/koala/.ssh"
      owner: "koala"
      group: "koala"
      state: "directory"
    tags:
      - "koala"

  - name: "copy deploy key (private) for user koala"
    copy:
      content: "{{ secret_deploy_key }}"
      dest: "/home/koala/.ssh/id_ed25519"
      owner: "koala"
      group: "koala"
      mode: "0600"

  # This checks if Koala is already locally present, and if there is an update
  # on the remote
  - name: "check status of koala's local git repo"
    become_user: "koala"
    git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala_env.git_ref }}"
    diff: false
    register: "koala_checkout_result"
    check_mode: true

  # This sets the information gained from the previous task in a fact
  - name: "set status of koala repo in fact"
    set_fact:
      koala_updated: true
    when:
      # List is evaluated as logical AND
      - koala_checkout_result.changed
      - koala_checkout_result.before != None

  # Enables maintenance mode only when Koala was already running, and needs to
  # be updated
  - name: "start process of enabling koala's maintenance mode"
    include_tasks: "playbooks/koala/.maintenance-on.yml"
    when: koala_updated | default(false)

  - name: "clone koala to /var/www/koala.{{ canonical_hostname }}"
    become_user: "koala"
    git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala_env.git_ref }}"
    diff: false
    when: koala_checkout_result.changed
    tags:
      - "koala"

  - name: "ensure koala environment vars are present"
    template:
      src: "templates/var/www/koala/.env.j2"
      dest: "/var/www/koala.{{ canonical_hostname }}/.env"
      owner: "koala"
      group: "koala"
      mode: "0600"
    notify: "restart koala"

  - name: "source environment variables for koala user"
    lineinfile:
      path: "/home/koala/.bashrc"
      insertafter: "EOF"
      create: true
      line: "source /var/www/koala.{{ canonical_hostname }}/.env"
    notify: "restart koala"

  - name: "ensure gem dependencies are installed"
    become_user: "koala"
    environment:
      RAILS_ENV: "{{ koala_env.environment }}"
    shell: 'bundle install --path ~/.gem/ruby/{{ koala.ruby_version.full }}/gems'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      executable: "/bin/bash"
    register: "koala_gem_result"
    changed_when: "'Installing' in koala_gem_result.stdout"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "ensure tmp directories exist"
    become_user: "koala"
    environment:
      RAILS_ENV: "{{ koala_env.environment }}"
    shell: 'bin/rails tmp:create'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      creates: "/var/www/koala.{{ canonical_hostname }}/tmp"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "ensure log directory exists"
    file:
      path: "/var/www/koala.{{ canonical_hostname }}/log"
      state: "directory"
      owner: "koala"
      group: "koala"
      mode: "0775"
    notify: "restart koala"
    tags:
      - "koala"

  - name: "ensure assets are precompiled"
    become_user: "koala"
    environment:
      RAILS_ENV: "{{ koala_env.environment }}"
    shell: 'bin/rails assets:precompile'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "koala_assets_result"
    changed_when: koala_assets_result.stdout.find("Already up-to-date.") == -1
    notify: "restart koala"

    # This block only runs when Koala was already present, and needs to be
    # updated. Makes a backup of Koala's db before performing any operations on
    # the db.
  - block:
      - name: "make pre-upgrade database backup to S3"
        systemd:
          name: "backup-databases.service"
          state: "started"
        become_user: "root"

      - name: "run migration(s)"
        shell:
          'bin/rails RAILS_ENV={{ koala_env.environment }} db:migrate'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"
          executable: "/bin/bash"
    when: koala_updated | default(false)
    become: true
    become_user: "koala"

  # Disables maintenance mode only when Koala had to be updated, and can now be
  # started again.
  - name: "start process of disabling koala's maintenance mode"
    include_tasks: "playbooks/koala/.maintenance-off.yml"
    when: koala_updated | default(false)

- name: "ensure environment vars file is present"
  template:
    src: "templates/var/www/koala/.env.j2"
    dest: "/var/www/koala.{{ canonical_hostname }}/.env"
    mode: "0700"
    owner: "koala"
    group: "koala"
  notify: "restart koala"
  tags:
    - "koala"


- name: "ensure koala's recurring services+timers are present"
  template:
    src: "templates/etc/systemd/system/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "koala-check-study-year.service"
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.service"
    - "koala-clean-users-table.timer"
    - "koala-reindex-search.service"
    - "koala-reindex-search.timer"
    - "koala-rake-fail@.service"
  notify:
    - "systemctl daemon-reload"

- name: "flush handlers"
  meta: "flush_handlers"

- name: "ensure koala's timers are started and enabled in production"
  service:
    name: "{{ item }}"
    enabled:
      "{% if 'staging' in group_names %}false{% else %}true\
      {% endif %}"
    state:
      "{% if 'staging' in group_names %}stopped{% else %}started{% endif %}"
  with_items:
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.timer"
    - "koala-reindex-search.timer"

# This task is used when you set koala.server to "webrick". Useful when you
# want to use this playbook for a development server, instead of
# staging|production.
- name: "ensure webrick script is present in development"
  template:
    src: "templates/{{ path }}.j2"
    dest: "/{{ path }}"
    mode: "0755"
    owner: "koala"
    group: "koala"
  vars:
    path: "home/koala/webrick.sh"
  when: koala.server == "webrick"
  tags:
    - "koala"

- block:
  - name: "ensure unicorn script is present in production"
    template:
      src: "templates/{{ path }}.j2"
      dest: "/{{ path }}"
      mode: "0755"
      owner: "koala"
      group: "koala"
    vars:
      path: "home/koala/unicorn.sh"
    notify: "restart koala"

  - name: "place koala's nginx configuration"
    template:
      src: "templates/etc/nginx/sites-available/koala.j2"
      dest: "/etc/nginx/sites-available/koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  - name: "enable koala's nginx config"
    file:
      src: "/etc/nginx/sites-available/{{ filename }}"
      path: "/etc/nginx/sites-enabled/{{ filename }}"
      state: "link"
    vars:
      filename: "koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  when: koala.server == "unicorn"
  tags:
    - "koala"
