---

- name: "create user for undead mongoose"
  ansible.builtin.user:
    name: "mongoose"
    home: "/var/www/mongoose"
    shell: "/usr/sbin/nologin"
    state: "present"
    system: true

- name: "copy nginx configuration"
  ansible.builtin.template:
    src: "mongoose.conf.j2"
    dest: "/etc/nginx/sites-available/mongoose.{{ canonical_hostname }}.conf"
  notify: "reload nginx"

- name: "enable nginx configuration"
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/mongoose.{{ canonical_hostname }}.conf"
    path: "/etc/nginx/sites-enabled/mongoose.{{ canonical_hostname }}.conf"
    state: "link"
  notify: "reload nginx"

- name: "set up postgres for mongoose"
  become_user: "postgres"
  become: true
  block:

  - name: "ensure mongoose user exists"
    community.postgresql.postgresql_user:
      name: "mongoose"

  - name: "ensure mongoose database exists"
    community.postgresql.postgresql_db:
      name: "mongoose"
      owner: "mongoose"

  - name: "ensure mongoose role exists"
    community.postgresql.postgresql_user:
      db: "mongoose"
      name: "mongoose"
      role_attr_flags: "CREATEDB,LOGIN"

  - name: "ensure mongoose database privileges are set properly"
    ignore_errors: "{{ ansible_check_mode }}"
    community.postgresql.postgresql_privs:
      db: "mongoose"
      role: "mongoose"
      type: "database"
      privs: "ALL"

- name: "set up mongoose repo"
  become_user: "mongoose"
  become: true
  block:

  - name: "ensure mongoose has a ssh directory"
    ansible.builtin.file:
      path: "~/.ssh"
      state: "directory"

  - name: "copy deploy key for private projects on GitHub"
    ansible.builtin.copy:
      content: "{{ secret_deploy_key }}"
      dest: "/var/www/mongoose/.ssh/id_ed25519"
      mode: "0600"

  - name: "clone mongoose repository"
    ansible.builtin.git:
      repo: "git@github.com:svsticky/undead-mongoose"
      dest: "/var/www/mongoose/undead-mongoose"
      depth: 1
      force: true
      version: "master"
    diff: false
    notify:
      - "restart mongoose"
      - "run migrations"

  - name: "template environment file for mongoose"
    ansible.builtin.template:
      src: ".env.j2"
      dest: "/var/www/mongoose/undead-mongoose/.env"
    diff: false
    notify: "restart mongoose"

- name: "template systemd service file for mongoose"
  ansible.builtin.template:
    src: "mongoose.service.j2"
    dest: "/etc/systemd/system/mongoose.service"
  notify: "restart mongoose"

- name: "flush_handlers"
  ansible.builtin.meta: "flush_handlers"

- name: "ensure mongoose service is running"
  ansible.builtin.systemd:
    name: "mongoose.service"
    state: "started"
    enabled: true
