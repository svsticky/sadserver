---
- name: "install nginx, php-fpm and openssl"
  apt:
    name: "{{ item }}"
    state: "present"
  with_items:
    - "nginx"
    - "php-fpm"
    - "openssl"

- name: "copy configuration files for nginx and php"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items:
    - "etc/nginx/nginx.conf"
    - "etc/ssl/certs/letsencrypt-ocsp-chain.pem"
    - "etc/php/7.0/fpm/php.ini"
  notify: "reload nginx"

- name: "ensure stock nginx configuration is not present"
  file:
    path: "/etc/nginx/{{ item }}"
    state: "absent"
  with_items:
    - "sites-available/default"
    - "sites-enabled/default"
  notify: "reload nginx"

- name: "copy dhparams and default nginx configuration"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items:
    - "etc/nginx/dhparams.pem"
    - "etc/nginx/sites-available/default.conf"
  notify: "reload nginx"

- name: "enable default nginx config"
  file:
    src: "/etc/nginx/sites-available/default.conf"
    path: "/etc/nginx/sites-enabled/default.conf"
    state: "link"
  notify: "reload nginx"

# This enables the nginx service, and starts it if necessary. Certbot depends on
# this.
- name: "enable and start nginx"
  service:
    name: "nginx"
    enabled: true
    state: "started"

- name: "Delete default html directory"
  file:
    path: "/var/www/html"
    state: "absent"

# We need this, because certbot is still at 0.4.x in the xenial repo as of
# 2017-09-15
- name: "add certbot apt repository"
  apt_repository:
    repo: "ppa:certbot/certbot"

- name: "install certbot"
  apt:
    name: "certbot"
    state: "latest"

# This directory will be used to validate all websites that need a certificate
- name: "create acme-challenges directory"
  file:
    path: "/var/www/acme-challenges"
    state: "directory"
    owner: "root"
    group: "www-data"
    # The 2xxx octal means the group setuid bit is set, meaning all files that
    # get created in this directory will have the group `www-data`.
    mode: "2750"

- name: "create folders for certbot renewal override"
  file:
    path: "/etc/systemd/system/{{ item }}"
    state: "directory"
  with_items:
    - "certbot.service.d"
    - "certbot.timer.d"

- name: "override parameters of certbot's renewal service+timer"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
  with_items:
    - "etc/systemd/system/certbot.service.d/override.conf"
    - "etc/systemd/system/certbot.timer.d/override.conf"
    - "etc/systemd/system/certbot-fail.service"
  notify: "systemctl daemon-reload"

# To make sure nginx is reloaded if needed
- meta: "flush_handlers"

- name: "request certificates"
  # --non-interactive makes sure command never waits for user input
  # --keep-until-expiring makes sure cert only gets renewed when cert is
  # actually close to expiring
  # --expand enables adding more SAN's to the same cert lineage later on
  # --webroot sets domain validation method
  # --domain adds main hostname of a website as CN and SAN, and all alternative
  # hostnames as SAN's
  # --deploy-hook reloads nginx after a successful issuance, and adds this in
  # the renewal configuration of the certificate
  command: >-
    certbot certonly
    {% if 'staging' in group_names and (item.real_certificate is not defined or
    item.real_certificate == false) %}
    --staging
    {% endif %}
    --non-interactive
    --agree-tos
    --email "domreg@svsticky.nl"
    --keep-until-expiring
    --expand
    --webroot
    --webroot-path /var/www/acme-challenges
    --domain {{ item.name }}
    {% if 'staging' not in group_names %}
    {% for hostname in item.alternative_names %}
    --domain {{ hostname }}
    {% endfor %}
    {% endif %}
    --deploy-hook "systemctl reload nginx"
  with_items: "{{ websites }}"
  register: "certbot_output"
  changed_when: "'no action taken' not in certbot_output.stdout"
  when: item.state == "present"
  loop_control:
    label: "{{ item.name }}"

- name: "ensure certbot timer is started in production"
  service:
    name: "certbot.timer"
    enabled: "{% if 'staging' in group_names %}false{% else %}true{% endif %}"
    state:
      "{% if 'staging' in group_names %}stopped{% else %}started{% endif %}"

# This task is used for websites which use the default nginx config, and need
# its webroot to be created.
- name: "create directories for regular websites"
  file:
    path:
      "/var/www/{% if item.user is defined %}{{ item.user }}/{% endif %}{{
      item.name }}"
    owner: "www-data"
    group: "{{ item.user | default(omit) }}"
    mode: "2775"
    state: "directory"
  with_items: "{{ websites }}"
  when:
    # List is evaluated as logical AND
    - item.state == "present"
    - item.custom_config is undefined
  loop_control:
    label: "{{ item.name }}"

# This task is used for websites which use a custom nginx config, but which
# still do need their webroot to be created.
- name: "create directories for custom websites"
  file:
    path:
      "/var/www/{% if item.user is defined %}{{ item.user }}/{% endif %}{{
      item.name }}"
    owner: "www-data"
    group: "{{ item.user | default(omit) }}"
    mode: "2775"
    state: "directory"
  with_items: "{{ websites }}"
  when:
    # When a website needs to be added, add a new condition to this list item
    # using "or"
    - item.name == canonical_hostname
  loop_control:
    label: "{{ item.name }}"

- name: "create nginx includes directory"
  file:
    path: "/etc/nginx/includes"
    state: "directory"

- name: "copy nginx include files"
  template:
    src: "templates/etc/nginx/includes/{{ item }}.j2"
    dest: "/etc/nginx/includes/{{ item }}"
  with_items:
    - "security-headers.conf"
    - "php-parameters.conf"
  notify: "reload nginx"

- name: "copy nginx configurations for regular websites"
  template:
    src: "templates/etc/nginx/sites-available/website.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item.name }}.conf"
  with_items: "{{ websites }}"
  when:
    # List is evaluated as logical AND
    - item.state == "present"
    - item.custom_config is undefined
  notify: "reload nginx"
  loop_control:
    label: "{{ item.name }}"

- name: "copy custom nginx configurations"
  template:
    src: "templates/etc/nginx/sites-available/{{ item.src }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item.dest }}.conf"
  with_items:
    - src: "savadaba"
      dest: "savadaba.{{ canonical_hostname }}"
    - src: "svsticky"
      dest: "{{ canonical_hostname }}"
  notify: "reload nginx"
  loop_control:
    label: "{{ item.dest }}"

- name: "enable regular nginx configurations"
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}.conf"
    path: "/etc/nginx/sites-enabled/{{ item.name }}.conf"
    state: "link"
  with_items: "{{ websites }}"
  when:
    # List is evaluated as logical AND
    - item.state == "present"
    - item.custom_config is undefined
  notify: "reload nginx"
  loop_control:
    label: "{{ item.name }}"

- name: "enable custom nginx configurations"
  file:
    src: "/etc/nginx/sites-available/{{ item }}.conf"
    path: "/etc/nginx/sites-enabled/{{ item }}.conf"
    state: "link"
  with_items:
    - "{{ canonical_hostname }}"
    - "savadaba.{{ canonical_hostname }}"
  notify: "reload nginx"

- name: "create htpasswd.d directory for basic auth files"
  file:
    path: "/etc/nginx/htpasswd.d"
    state: "directory"

- name: "delete nginx configurations of absent websites"
  file:
    path: "/etc/nginx/{{ item[0] }}/{{ item[1].name }}.conf"
  with_nested:
    -
      - "sites-available"
      - "sites-enabled"
    - "{{ websites }}"
  when: item[1].state == "absent"
  notify: "reload nginx"
  loop_control:
    label: "{{ item[0] }}/{{ item[1].name }}.conf"
