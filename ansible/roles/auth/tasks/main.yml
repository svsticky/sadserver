---
# Contains a snapshot of the hostkeys of github.com, so these can be validated
# at runtime
- name: "install system-wide known hostkeys"
  ansible.builtin.copy:
    src: "ssh_known_hosts"
    dest: "/etc/ssh/ssh_known_hosts"
    owner: "root"
    group: "root"
    mode: "0644"

- name: "set auth for eindbaas user"
  ansible.builtin.lineinfile:
    dest: "/etc/sudoers.d/eindbaas"
    line: "eindbaas ALL= NOPASSWD:ALL"
    state: "present"
    create: true
    validate: "visudo -cf %s"

- name: "set NOPASSWD for sudo group in staging"
  ansible.builtin.lineinfile:
    dest: "/etc/sudoers.d/ansible"
    line: "%sudo ALL=(ALL:ALL) NOPASSWD:ALL"
    state: "{% if 'staging' in group_names %}present{% else %}absent{% endif %}"
    create: true
    validate: "visudo -cf %s"

- name: "check if password of admin user is locked" # noqa risky-shell-pipe
  ansible.builtin.shell: "passwd --status {{ item.name }} | awk '{print $2}'"
  register: "admin_passwords"
  with_items: "{{ users }}"
  when:
    # List is evaluated as logical AND
    - "'staging' not in group_names"
    - item.admin
    - item.state == "present"
    - item.name != "ansible"
  changed_when: false
  loop_control:
    label: "{{ item.name }}"
  check_mode: false

- name:
    "make new admin users choose a password at next login, in production"
  ansible.builtin.command: "passwd -de {{ item.item.name }}"
  with_items: "{{ admin_passwords.results }}"
  when:
    # List is evaluated as logical AND
    - "'staging' not in group_names"
    - item.stdout is defined
    - item.stdout == "L"
  loop_control:
    label: "user: {{ item.item.name }}"

- name: "ensure .ssh-directory is present at all users"
  ansible.builtin.file:
    path: "{{ item.0.home_prefix }}/{{ item.0.name }}/.ssh"
    state: "directory"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
    mode: "0755"
  when: item.0.state == 'present'
  with_subelements:
    - "{{ users }}"
    # "github_accounts" is added to the loop, so the directory is not created
    # if there are no keys
    - "github_accounts"
    - skip_missing: true
  loop_control:
    label: "{{ item.0.name }}"

- name:
    "ensure SSH keys for users are present, fetched from associated GitHub
    accounts"
  ansible.builtin.blockinfile:
    path: "{{ item.0.home_prefix }}/{{ item.0.name }}/.ssh/authorized_keys"
    block:
      "{{ lookup('url', 'https://github.com/' + item.1.username + '.keys',
      split_lines=False) }}"
    state: "{{ item.1.state }}"
    # When changing value of marker, also update it in task down below
    marker: "# {mark} SSH keys for https://github.com/{{ item.1.username }}"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
    create: true
  # Only run the above logic when we still want the user to exist.
  when: item.0.state == 'present'
  with_subelements:
    - "{{ users }}"
    - "github_accounts"
    - skip_missing: true
  loop_control:
    label: "user: {{ item.0.name }}, key: {{ item.1.username }}"

- name: "copy deploy key for private projects on GitHub"
  ansible.builtin.copy:
    content: "{{ secret_deploy_key }}"
    dest: "/home/ansible/.ssh/deploy_ed25519"
    owner: "ansible"
    group: "ansible"
    mode: "0600"

- name: "symlink deploy key for root"
  ansible.builtin.file:
    src: "/home/ansible/.ssh/{{ deploy_key_name.src }}"
    path: "/root/.ssh/{{ deploy_key_name.dest }}"
    state: link
  vars:
    deploy_key_name:
      src: "deploy_ed25519"
      dest: "id_ed25519"

- name: "remove public keys for root account"
  ansible.builtin.file:
    path: "/root/.ssh/authorized_keys"
    state: "absent"

# The bootstrap playbook adds the SSH keys (as added by DO), to the ansible
# user. It does this by first reading the relevant parts of
# ~/.ssh/authorized_keys into an Ansible variable (for later usage), to then
# append the file with the SSH keys.
# Because the keys are re-added and managed by Ansible itself, the old
# duplicates must be deleted once.
- name: "gather public SSH keys for ansible user"
  become: false
  block:
  - name:
      "save current list of public keys for ansible user"
    ansible.builtin.shell:
      "sed -n '/# BEGIN SSH key/,$p' ~/.ssh/authorized_keys"
    register: "ansible_user_public_keys"
    changed_when: false
    tags:
      - skip_ansible_lint # Reason: the linter complains about using a shell, while the proposed alternatives do not do the same
    check_mode: false

  - name:
      "remove superfluous public keys for ansible user, added by bootstrap
      playbook"
    ansible.builtin.copy:
      content: "{{ ansible_user_public_keys.stdout + '\n' }}"
      dest: "~/.ssh/authorized_keys"

- name: "copy hardened sshd configuration"
  ansible.builtin.template:
    src: "sshd_config.j2"
    dest: "/etc/ssh/sshd_config"
  notify: "reboot server"
