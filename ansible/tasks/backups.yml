---
- block:
  - name: "install awscli"
    apt:
      name: "awscli"
      state: "present"

  - name: "ensure aws cli configuration folders are present"
    file:
      path: "{{ item.path }}/.aws"
      owner: "{{ item.owner }}"
      group: "{{ item.owner }}"
      state: "directory"
    with_items:
      - path: "/home/ansible"
        owner: "ansible"
      - path: "/root"
        owner: "root"

  - name: "ensure aws cli configuration is present"
    template:
      src: "templates/home/ansible/.aws/config.j2"
      dest: "/home/ansible/.aws/config"
      mode: "600"
    become: false

  - name: "ensure aws cli configuration is linked for root user"
    file:
      src: "/home/ansible/.aws/config"
      path: "/root/.aws/config"
      state: "link"

  - name: "ensure aws cli script is present, with correct permissions"
    template:
      src: "templates/{{ backup_script_path }}.j2"
      dest: "/{{ backup_script_path }}"
      mode: "0744"
    vars:
      backup_script_path: "usr/local/bin/backup-to-s3.sh"

  - name: "ensure backup services and timers are present"
    template:
      src: "{{ item }}"
      dest:
        "/etc/systemd/system/\
        {{ item | basename | regex_replace('\\.j2$','') }}"
    with_fileglob:
      - "../templates/etc/systemd/system/backup-*"
    notify:
      - "systemctl daemon-reload"
    register: "backup_units"
    loop_control:
      label: "{{ item | basename }}"

  - name: "start and enable backup timers in production"
    service:
      name: "{{ item.dest | basename }}"
      enabled: "{% if 'staging' in group_names %}false{% else %}true{% endif %}"
      state:
        "{% if 'staging' in group_names %}stopped{% else %}started{% endif %}"
    with_items:
      "{{ backup_units.results }}"
    when: "item.dest | basename is match('.+\\.timer')"
    loop_control:
      label: "{{ item.dest | basename }}"
  tags: "backups"
