#!/usr/bin/env bash
# {{ ansible_managed }}

# Unofficial Bash Strict Mode
set -efuo pipefail
IFS=$'\n\t'

GITHUB_USER="svsticky-deploy"
GITHUB_PASSWORD="{{ secret_static_sticky.github_deployments_token }}"
DEPLOY_ENV="{{ ('staging' in group_names) | ternary("staging", "production") }}"

fail_github_deploy_status() {
  # Create a "deployment status" at GitHub: "failure"
  curl \
    --silent --show-error \
    --output /dev/null \
    --fail \
    --user "${GITHUB_USER}:${GITHUB_PASSWORD}" \
    --header "Accept: application/vnd.github.ant-man-preview+json" \
    --header "Content-Type: application/json" \
    --request POST \
    --data \
      '{"state": "failure",
        "environment_url": "https://{{ canonical_hostname }}/",
        "log_url": "https://{{ canonical_hostname }}/logs/'"${INVOCATION_ID}"'"
      }' \
    "https://api.github.com/repos/svsticky/static-sticky/deployments/${DEPLOY_ID}/statuses"
}

cd /var/www/static-sticky/static-sticky

git reset --hard HEAD

OLD_GIT_REF="$(git rev-parse --short HEAD)"
OLD_NODE_VERSION="$(cat .nvmrc)"
# Get latest version of website sourcecode
git pull origin {{ static_sticky_env.git_ref }}
NEW_GIT_REF="$(git rev-parse --short HEAD)"
NEW_NODE_VERSION="$(cat .nvmrc)"

if [[ "${OLD_GIT_REF}" != "${NEW_GIT_REF}" ]]; then
  DEPLOY_DESCRIPTION="Deploying commit ${NEW_GIT_REF} on top of ${OLD_GIT_REF}."
else
  DEPLOY_DESCRIPTION="Deploying new changes from Contentful."
fi

# Create a "deployment" at GitHub and save its ID
DEPLOY_ID="$(curl \
  --silent --show-error \
  --fail \
  --user "${GITHUB_USER}:${GITHUB_PASSWORD}" \
  --header "Accept: application/vnd.github.v3+json" \
  --header "Content-Type: application/json" \
  --request POST \
  --data \
    '{"ref": "'"${NEW_GIT_REF}"'",
      "auto_merge": false,
      "required_contexts": [],
      "description": "'"${DEPLOY_DESCRIPTION}"'",
      "environment": "'"${DEPLOY_ENV}"'"
    }' \
  https://api.github.com/repos/svsticky/static-sticky/deployments \
  | jq --raw-output '.id')"

trap fail_github_deploy_status ERR

source /var/www/static-sticky/.nvm/nvm.sh

# Check if there are new commits, because this is not necessary if a deploy is
# triggered by Contentful
if [[ "${OLD_GIT_REF}" != "${NEW_GIT_REF}" ]]; then
  nvm install

  if [[ "${OLD_NODE_VERSION}" != "${NEW_NODE_VERSION}" ]]; then
    npm rebuild
  fi

  npm install
fi

# Build website, and if it fails retry after purging the local cache
npm run build || { rm -r ./.cache && npm run build; }

# Copy website contents to webroot, replacing already existing target contents
rsync --delete --recursive \
  /var/www/static-sticky/static-sticky/public/ \
  /var/www/static-sticky/static.{{ canonical_hostname }}/

# Create a "deployment status" at GitHub: "success"
curl \
  --silent --show-error \
  --output /dev/null \
  --fail \
  --user "${GITHUB_USER}:${GITHUB_PASSWORD}" \
  --header "Accept: application/vnd.github.ant-man-preview+json" \
  --header "Content-Type: application/json" \
  --request POST \
  --data \
    '{"state": "success",
      "environment_url": "https://{{ canonical_hostname }}/",
      "log_url": "https://{{ canonical_hostname }}/logs/'"${INVOCATION_ID}"'"
    }' \
  "https://api.github.com/repos/svsticky/static-sticky/deployments/${DEPLOY_ID}/statuses"
