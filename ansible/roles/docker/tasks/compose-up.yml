---
# NOTE These tasks expect the 'project_source' variable to be set

- name: "Gather service facts"
  ansible.builtin.service_facts:

- name: "Assert that Docker daemon is active, but do not start it"
  ansible.builtin.assert:
    that: "ansible_facts.services['docker'].state == 'running'"

- name: "Tear down existing services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    state: "absent"

- name: "Create and start services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
  register: "output"

# - name: Show results
#   ansible.builtin.debug:
#     var: output

- name: "Run `docker compose up` again"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
  register: "output"

- name: "Assert that all services properly started"
  ansible.builtin.assert:
    that: "not output.changed"

# Remember what services are included in the compose file, for later
- name: "Extract service names from output"
  ansible.builtin.set_fact:
    docker_compose_service_names: "{{ output.containers | map(attribute='Name') | list }}"

# - name: Show docker results
#   ansible.builtin.debug:
#     var: output

# - name: Show parsed services
#   ansible.builtin.debug:
#     var: docker_compose_service_names

- name: "Stop all services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    state: "stopped"
  register: "output"

# - name: Show results
#   ansible.builtin.debug:
#     var: output

- name: "Verify that all containers stopped" # TODO how to verify all other services?
  ansible.builtin.assert:
    that:
      - "output.containers | selectattr('Name', 'equalto', item) | map(attribute='State') | list | first == 'exited'"
  loop: "{{ docker_compose_service_names }}"

- name: "Restart services"
  community.docker.docker_compose_v2:
    project_src: "{{ project_source }}"
    state: "restarted"
  register: "output"

# - name: Show results
#   ansible.builtin.debug:
#     var: output

- name: "Verify that all containers are running" # TODO how to verify all other services?
  ansible.builtin.assert:
    that:
      - "output.containers | selectattr('Name', 'equalto', item) | map(attribute='State') | list | first == 'running'"
  loop: "{{ docker_compose_service_names }}"
