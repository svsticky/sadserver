---
- name: "install nginx, php-fpm, openssl and fancyindex"
  apt:
    name:
      - "nginx"
      - "php-fpm"
      - "openssl"
      - "libnginx-mod-http-fancyindex"
    state: "present"

- name:
    "create directories for onfailure overrides for nginx + php-fpm services"
  file:
    path: "{{ item }}"
    mode: "o+rx"
    state: "directory"
  with_items:
    - "/etc/systemd/system/nginx.service.d"
    - "/etc/systemd/system/php7.2-fpm.service.d"

- name: "copy onfailure overrides for nginx + php-fpm services"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
    mode: "o+r"
  with_items:
    - "etc/systemd/system/nginx.service.d/onfailure.conf"
    - "etc/systemd/system/php7.2-fpm.service.d/onfailure.conf"
  notify: "systemctl daemon-reload"

- name: "copy umask override for nginx service"
  template:
    src: "templates/etc/systemd/system/nginx.service.d/umask.conf.j2"
    dest: "/etc/systemd/system/nginx.service.d/umask.conf"
    mode: "o+r"
  notify: "restart nginx"

- name: "create nginx includes directory"
  file:
    path: "/etc/nginx/includes"
    mode: "o+rx"
    state: "directory"

- name: "copy nginx include files"
  template:
    src: "{{ item }}"
    dest:
      "/etc/nginx/includes/{{ item | basename | regex_replace('\\.j2$','') }}"
    mode: "o+r"
  with_fileglob:
    - "templates/etc/nginx/includes/*.j2"
  notify: "reload nginx"

- name: "copy general configuration file for nginx"
  template:
    src: "templates/etc/nginx/nginx.conf.j2"
    dest: "/etc/nginx/nginx.conf"
    mode: "o+r"
  notify: "reload nginx"

- name: "ensure stock nginx configuration is not present"
  file:
    path: "/etc/nginx/{{ item }}"
    state: "absent"
  with_items:
    - "sites-available/default"
    - "sites-enabled/default"
  notify: "reload nginx"

- name: "copy dhparams and default nginx configuration"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
    mode: "o+r"
  with_items:
    - "etc/nginx/dhparams.pem"
    - "etc/nginx/sites-available/default.conf"
  notify: "reload nginx"

- name: "enable default nginx config"
  file:
    src: "/etc/nginx/sites-available/default.conf"
    path: "/etc/nginx/sites-enabled/default.conf"
    mode: "o+r"
    state: "link"
  notify: "reload nginx"

# This enables the nginx service, and starts it if necessary. Certbot depends on
# this.
- name: "enable and start nginx"
  service:
    name: "nginx"
    enabled: true
    state: "started"

- name: "Delete default html directory"
  file:
    path: "/var/www/html"
    state: "absent"

# We need this, because certbot is still at 0.4.x in the xenial repo as of
# 2017-09-15
- name: "add certbot apt repository"
  apt_repository:
    repo: "ppa:certbot/certbot"

- name: "install certbot"
  apt:
    name: "certbot"
    state: "latest"

# This directory will be used to validate all websites that need a certificate
- name: "create acme-challenges directory"
  file:
    path: "/var/www/acme-challenges"
    state: "directory"
    owner: "root"
    group: "www-data"
    # The 2xxx octal means the group setuid bit is set, meaning all files that
    # get created in this directory will have the group `www-data`.
    mode: "2750"

- name: "create folders for certbot renewal override"
  file:
    path: "/etc/systemd/system/{{ item }}"
    mode: "o+rx"
    state: "directory"
  with_items:
    - "certbot.service.d"
    - "certbot.timer.d"

- name: "override parameters of certbot's renewal service+timer"
  template:
    src: "templates/{{ item }}.j2"
    dest: "/{{ item }}"
    mode: "o+r"
  with_items:
    - "etc/systemd/system/certbot.service.d/override.conf"
    - "etc/systemd/system/certbot.service.d/onfailure.conf"
    - "etc/systemd/system/certbot.timer.d/override.conf"
  notify: "systemctl daemon-reload"

# To make sure nginx is reloaded if needed
- meta: "flush_handlers"

- name: "request certificates"
  # --non-interactive makes sure command never waits for user input
  # --keep-until-expiring makes sure cert only gets renewed when cert is
  # actually close to expiring
  # --expand enables adding more SAN's to the same cert lineage later on
  # --webroot sets domain validation method
  # --domain adds main hostname of a website as CN and SAN, and all alternative
  # hostnames as SAN's
  # --deploy-hook reloads nginx after a successful issuance, and adds this in
  # the renewal configuration of the certificate
  command: >-
    certbot certonly
    {% if 'staging' in group_names and (item.real_certificate is not defined or
    item.real_certificate == false) %}
    --staging
    {% endif %}
    --non-interactive
    --agree-tos
    --email "domreg@svsticky.nl"
    --keep-until-expiring
    --cert-name {{ item.name }}
    --webroot
    --webroot-path /var/www/acme-challenges
    --domain {{ item.name }}
    {% if 'staging' not in group_names %}
    {% for hostname in item.alternative_names %}
    --domain {{ hostname }}
    {% endfor %}
    {% endif %}
    --deploy-hook "systemctl reload nginx"
  with_items: "{{ websites }}"
  register: "certbot_output"
  changed_when: "'no action taken' not in certbot_output.stdout"
  when: item.state == "present"
  loop_control:
    label: "{{ item.name }}"

- name: "ensure certbot timer is started in production"
  service:
    name: "certbot.timer"
    enabled: "{% if 'staging' in group_names %}false{% else %}true{% endif %}"
    state:
      "{% if 'staging' in group_names %}stopped{% else %}started{% endif %}"

- name: "copy general configuration for php"
  template:
    src: "templates/{{ php_config }}.j2"
    dest: "/{{ php_config }}"
    mode: "o+r"
  vars:
    php_config: "etc/php/7.2/fpm/php.ini"
  notify: "reload php"

- name: "delete default php-fpm pool"
  file:
    path: "/etc/php/7.2/fpm/pool.d/www.conf"
    state: "absent"

- name: "template php-fpm pool configurations"
  template:
    src: "templates/etc/php/7.2/fpm/pool.d/pool-template.conf.j2"
    dest: "/etc/php/7.2/fpm/pool.d/pool-{{ item.name }}.conf"
    mode: "o+r"
  with_items: "{{ websites }}"
  when: "item.php_enabled | default(false)"
  notify: "reload php"
  loop_control:
    label: "{{ item.name }}"

# This task is used for websites which use the default nginx config, and need
# its webroot to be created.
- name: "create directories for regular websites"
  file:
    path: "/var/www/{{ item.name }}"
    owner: "{{ item.user }}"
    group: "www-data"
    mode: "g+s"
    state: "directory"
  with_items: "{{ websites }}"
  when:
    # List is evaluated as logical AND
    - item.state == "present"
    - "item.custom_config is undefined or not item.custom_config"
  loop_control:
    label: "{{ item.name }}"

# This task is used for websites which use a custom nginx config, but which
# still do need their webroot to be created.
- name: "create directories for custom websites"
  file:
    path: "/var/www/{{ item.name }}"
    owner: "{{ item.user }}"
    group: "www-data"
    mode: "g+s"
    state: "directory"
  with_items: "{{ websites }}"
  when:
    # When a website needs to be added, add a new condition to this list item
    # using "or"
    - item.name == 'old.' + canonical_hostname
  loop_control:
    label: "{{ item.name }}"

# A nicer (and probably more efficient) option would be using the json_query
# filter instead of the nested loop, but that requires an extra dependency
# (python3-jmespath).
- name: "add symlinks to a user's webroots in their homedir"
  file:
    src: "/var/www/{{ item.0.name }}"
    path: "/home/{{ item.0.user }}/{{ item.0.name }}"
    follow: false
    force: true
    state: "link"
  with_nested:
    - "{{ websites }}"
    - "{{ users }}"
  when:
    "item.0.state == 'present' and
    item.0.user == item.1.name"
  loop_control:
    label:
      website: "{{ item.0.name }}"
      user: "{{ item.0.user }}"

- name: "copy nginx configurations for regular websites"
  template:
    src: "templates/etc/nginx/sites-available/website.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item.name }}.conf"
    mode: "o+r"
  with_items: "{{ websites }}"
  when:
    # List is evaluated as logical AND
    - item.state == "present"
    - "item.custom_config is undefined or not item.custom_config"
  notify: "reload nginx"
  loop_control:
    label: "{{ item.name }}"

- name: "copy custom nginx configurations"
  template:
    src: "templates/etc/nginx/sites-available/{{ item.src }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item.dest }}.conf"
    mode: "o+r"
  with_items:
    - src: "aas"
      dest: "aas.{{ canonical_hostname }}"
    - src: "dgdarc"
      dest: "dgdarc.{{ canonical_hostname }}"
    - src: "old.svsticky"
      dest: "old.{{ canonical_hostname }}"
    - src: "savadaba"
      dest: "savadaba.{{ canonical_hostname }}"
    - src: "svsticky"
      dest: "{{ canonical_hostname }}"
    - src: "wintersport"
      dest: "wintersport.{{ canonical_hostname }}"
  notify: "reload nginx"
  loop_control:
    label: "{{ item.dest }}"

- name: "enable regular nginx configurations"
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}.conf"
    path: "/etc/nginx/sites-enabled/{{ item.name }}.conf"
    state: "link"
  with_items: "{{ websites }}"
  when:
    # List is evaluated as logical AND
    - item.state == "present"
    - "item.custom_config is undefined or not item.custom_config"
  notify: "reload nginx"
  loop_control:
    label: "{{ item.name }}"

- name: "enable custom nginx configurations"
  file:
    src: "/etc/nginx/sites-available/{{ item }}.conf"
    path: "/etc/nginx/sites-enabled/{{ item }}.conf"
    state: "link"
  with_items:
    - "aas.{{ canonical_hostname }}"
    - "old.{{ canonical_hostname }}"
    - "{{ canonical_hostname }}"
    - "savadaba.{{ canonical_hostname }}"
    - "wintersport.{{ canonical_hostname }}"
  notify: "reload nginx"

- name: "create htpasswd.d directory for basic auth files"
  file:
    path: "/etc/nginx/htpasswd.d"
    group: "www-data"
    mode: "2750"
    state: "directory"

- name: "delete nginx configurations of absent websites"
  file:
    path: "/etc/nginx/{{ item[0] }}/{{ item[1].name }}.conf"
    state: "absent"
  with_nested:
    -
      - "sites-available"
      - "sites-enabled"
    - "{{ websites }}"
  when: item[1].state == "absent"
  notify: "reload nginx"
  loop_control:
    label: "{{ item[0] }}/{{ item[1].name }}.conf"
