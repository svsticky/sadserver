---
- name: "declare variables used in pretix tasks"
  ansible.builtin.set_fact:
    pretix_maintenance_directory: "/var/www/pretix-maintenance/"

- name: "ensure pretix user is present"
  ansible.builtin.user:
    name: "pretix"
    home: "/var/www/pretix"
    system: true

- name: "ensure dependencies are present"
  ansible.builtin.apt:
    name:
      - "git"
      - "build-essential"
      - "python-dev"
      - "python3-virtualenv"
      - "python3"
      - "python3-pip"
      - "python3-dev"
      - "libxml2-dev"
      - "libxslt1-dev"
      - "libffi-dev"
      - "zlib1g-dev"
      - "libssl-dev"
      - "gettext"
      - "libpq-dev"
      - "libjpeg-dev"
    state: "present"

- name: "setup Pretix database"
  become_user: "postgres"
  become: true
  block:
  - name: "ensure Pretix database user exists"
    community.postgresql.postgresql_user:
      name: "pretix"
      state: "present"

  - name: "ensure database exists"
    community.postgresql.postgresql_db:
      name: "pretix"
      owner: "pretix"
      state: "present"
    notify: "pretix post-upgrade"

- name: "ensure pretix config directories are present"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    owner: "pretix"
    group: "pretix"
  with_items:
    - "/etc/pretix"
    - "/var/www/pretix/data/media"

- name: "place pretix config file"
  ansible.builtin.template:
    src: "pretix.cfg.j2"
    dest: "/etc/pretix/pretix.cfg"
    owner: "pretix"
    group: "pretix"
    mode: "0600"
  notify: "restart pretix"

- name: "create virtualenv if not exists, update pip and tools"
  ansible.builtin.pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    virtualenv: "/var/www/pretix/venv"
    virtualenv_python: "python3.8"
    state: "present"
  with_items:
    # Change in pip's dependency resolver after 24.0 causes installation of pretix to fail
    - name: pip
      version: "24.0"
    - name: "setuptools"
      version: "latest"
    - name: "wheel"
      version: "latest"
  become: true
  become_user: "pretix"

- name: "place pretix's service files"
  ansible.builtin.template:
    src: "systemd/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "pretix-web.service"
    - "pretix-worker.service"
    - "pretix-runperiodic.service"
    - "pretix-runperiodic.timer"
  notify:
    - "systemctl daemon-reload"
    - "restart pretix"

- name: "install pretix"
  ansible.builtin.pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    state: "present"
    virtualenv: "/var/www/pretix/venv"
    virtualenv_python: "python3.9"

  with_items:
    - name: "gunicorn"
      version: "20.1.0"
    - name: "pretix"
      version: "4.8.0"
    - name: "pretix-pages"
      version: "1.4.1"
    - name: "pretix-mollie"
      version: "1.3.2"
    - name: "pretix-fontpack-free"
      version: "1.7.0"
    - name: "psycopg2"
      version: "2.9.3"
    - name: "django-mysql"
      version: "4.5.0"
  notify:
    - "pretix post-upgrade"
    - "restart pretix"
  become: true
  become_user: "pretix"

- name: "Ensure daemon is reloaded"
  ansible.builtin.meta: "flush_handlers"

- name: "ensure pretix services are running and enabled"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "started"
    enabled: "yes"
  with_items:
    - "pretix-web.service"
    - "pretix-worker.service"
    - "pretix-runperiodic.timer"

  # These files are used when maintenance mode is on. Maintenance mode
  # basically means nginx gives a 503 page, defined here.
- name: "prepare maintenance mode files"
  block:
  - name: "ensure pretix maintenance mode directory is present" # TODO move pretix itself and these files into /var/www/pretix and /var/www/pretix/pretix.svsticky.nl or something"
    ansible.builtin.file:
      path: "{{ pretix_maintenance_directory }}"
      state: "directory"
      owner: "pretix"
      group: "pretix"

  - name: "place maintenance page"
    ansible.builtin.template:
      owner: "pretix"
      group: "pretix"
      src: "pretix_maintenance.html.j2"
      dest: "{{ pretix_maintenance_directory }}/pretix-maintenance.html"

  - name: "prepare maintenance mode services"
    ansible.builtin.template:
      src: "systemd/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}"
    with_items:
      - "pretix-maintenance.service"
      - "pretix-maintenance.timer"
    notify:
      - "systemctl daemon-reload"

  - name: "ensure maintenance mode timer is enabled"
    ansible.builtin.service:
      name: "pretix-maintenance.timer"
      state: "started"
      enabled: "yes"
      # Deliberatly do not start the service itself yet

  # To support easy maintenance mode toggling, we configure nginx slightly
  # differently. Like usually, we have a symlink in 'sites-enabled' pointing to
  # the config stored in 'sites-available'. However, this time the config in
  # 'sites-available' is another symlink to either the maintenance config or
  # regular config, stored in the maintenance directory. Toggling to
  # maintenance mode means adjusting the second symlink, and reloading nginx.
  #
  # We further defined a systemd service earlier which ensures the maintenance mode is
  # on or off, depending on if it should currently be on or off. This service
  # is periodically triggered by a systemd timer.
  #
  # Lastly, when deploying, we do not want to configure nginx for either
  # maintenance mode or regular mode, for both could be undesired in some
  # scenarios. As a solution, rather than (manually) toggling the maintenance
  # to the correct state immediatly afterwards and leaving a short gap, we let
  # the script finish the nginx setup. We thus define in one place what mode
  # should be deployed currently, and happen to trigger it periodically as well.
  # This way, when the deployment is finished and pretix is accessible, it will
  # always be in the desired state.
- name: "set up nginx configs for pretix"
  block:
  - name: "place pretix's regular nginx configuration"
    ansible.builtin.template:
      src: "pretix.conf.j2"
      dest: "{{ pretix_maintenance_directory }}/regular-nginx.conf"
    notify: "pretix deploy desired nginx"

  - name: "place pretix's maintenance nginx configuration"
    ansible.builtin.template:
      src: "pretix_maintenance.conf.j2"
      dest: "{{ pretix_maintenance_directory }}/maintenance-nginx.conf"
    notify: "pretix deploy desired nginx"

  # This is what the systemd service does already (but sometimes for maintenance mode):
  # - name: "use regular nginx conf"
  #   ansible.builtin.file:
  #     src: "{{ pretix_maintenance_directory }}/regular-nginx.conf"
  #     dest: "/etc/nginx/sites-available/pretix.{{ canonical_hostname }}.conf"
  #     state: "link"
  #   notify: "reload nginx"

  - name: "enable pretix's nginx configuration"
    ansible.builtin.file:
      src: "/etc/nginx/sites-available/{{ filename }}"
      dest: "/etc/nginx/sites-enabled/{{ filename }}"
      state: "link"
    vars:
      filename: "pretix.{{ canonical_hostname }}.conf"
    notify: "pretix deploy desired nginx"
