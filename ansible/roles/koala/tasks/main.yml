---
- name: "ensure koala system user exists"
  ansible.builtin.user:
    name: "koala"
    state: "present"
    system: true
    shell: "/bin/bash"
  notify: "restart koala"

- name: "use koala cachix"
  ansible.builtin.command: "cachix use svsticky-constipated-koala"

- name: "ensure clone location exists and is owned by koala"
  ansible.builtin.file:
    path: "/var/www/koala.{{ canonical_hostname }}"
    state: "directory"
    owner: "koala"
    group: "koala"
    recurse: true

- name: "ensure koala service file is present"
  ansible.builtin.template:
    src: "systemd/koala.service.j2"
    dest: "/etc/systemd/system/koala.service"
  notify:
    - "systemctl daemon-reload"
    - "restart koala"


- block:
  - name: "place koala OIDC signing key"
    ansible.builtin.copy:
      dest: "~/oidc_signing_key.pem"
      content: "{{ vault_secret_koala_oidc_signing_key }}"
      mode: "0600"
    notify: "restart koala"

  - name: "ensure koala has a ssh directory"
    ansible.builtin.file:
      path: "~/.ssh"
      state: "directory"

  - name: "copy deploy key (private) for user koala"
    ansible.builtin.copy:
      content: "{{ secret_deploy_key }}"
      dest: "/home/koala/.ssh/id_ed25519"
      mode: "0600"

  # This checks if Koala is already locally present, and if there is an update
  # on the remote
  - name: "check status of koala's local git repo"
    ansible.builtin.git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala_env.git_ref }}"
    diff: false
    register: "koala_checkout_result"
    check_mode: true

  - name: "create marker file to trigger migration"
    ansible.builtin.file:
      path: "/home/koala/.KOALA_MIGRATION_PENDING"
      state: "touch"
      owner: "koala"
      group: "koala"
    when: "koala_checkout_result.changed"

  - name: "check if migration marker file exists"
    ansible.builtin.stat:
      path: "/home/koala/.KOALA_MIGRATION_PENDING"
      get_checksum: "no"
      get_attributes: "no"
      get_mime: "no"
    register: "koala_update_marker"

  # This sets the information gained from the previous task in a fact
  - name: "determine whether we need to update koala"
    ansible.builtin.set_fact:
      koala_updated: "{{ koala_update_marker.stat.exists }}"

  - name: "ensure koala's recurring services+timers are present"
    become: true
    become_user: "root"
    ansible.builtin.template:
      src: "systemd/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}"
    with_items:
      - "koala-check-study-year.service"
      - "koala-check-study-year.timer"
      - "koala-clean-users-table.service"
      - "koala-clean-users-table.timer"
      - "koala-status-mail.service"
      - "koala-status-mail.timer"
      - "koala-payment-mail.service"
      - "koala-payment-mail.timer"
      - "sidekiq.service"
    notify:
      - "systemctl daemon-reload"

  # Enables maintenance mode only when Koala was already running, and needs to
  # be updated
  - name: "start process of enabling koala's maintenance mode"
    ansible.builtin.include_tasks: "maintenance-on.yml"
    when: koala_updated

  - name: "clone koala to /var/www/koala.{{ canonical_hostname }}"
    ansible.builtin.git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala_env.git_ref }}"
    diff: false
    when: koala_checkout_result.changed
    notify: "restart sidekiq"

  - name: "ensure tmp directory exist (for nix-shell)"
    ansible.builtin.file:
      path: "/var/www/koala.{{ canonical_hostname }}/tmp/pids"
      state: "directory"
      owner: "koala"
      group: "koala"

  - name: "ensure environment variables are present"
    ansible.builtin.template:
      src: ".env.j2"
      dest: "/var/www/koala.{{ canonical_hostname }}/.env"
      mode: "0700"
    notify:
      - "restart koala"
      - "restart sidekiq"

  - name: "configure nix to use koala cachix"
    ansible.builtin.command: "cachix use svsticky-constipated-koala"

  - name: "building nix environment (this might take a while)"
    ansible.builtin.command: nix-shell --run 'echo lol'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      creates: "/var/www/koala.{{ canonical_hostname }}/tmp"
    notify: "restart koala"

  - name: "ensure tmp directories exist"
    ansible.builtin.command: nix-shell --run 'rails tmp:create'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      creates: "/var/www/koala.{{ canonical_hostname }}/tmp"
    notify: "restart koala"

  - name: "ensure log directory exists"
    ansible.builtin.file:
      path: "/var/www/koala.{{ canonical_hostname }}/log"
      state: "directory"
      mode: "0775"
    notify: "restart koala"

  - block:
      - name: "make pre-upgrade database backup to S3"
        ansible.builtin.systemd:
          name: "backup-postgres.service"
          state: "started"
        become_user: "root"

      - name: "check whether the database exists"
        ansible.builtin.shell: nix-shell --run 'dotenv rails db:version'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"
          executable: "/bin/bash"
        register: "koala_database_version"

      - name: "parse database version message"
        ansible.builtin.set_fact:
          database_exists: "{{ koala_database_version.stdout_lines[-1] != 'Current version: 0' }}"

      - name: "run database setup if database does not exist"
        ansible.builtin.shell: nix-shell --run 'dotenv rails db:setup'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"
          executable: "/bin/bash"
        when: "not database_exists"

      - name: "run migration(s) if database already exists"
        ansible.builtin.shell: nix-shell --run 'dotenv rails db:migrate'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"
          executable: "/bin/bash"
        when: "database_exists"

      - name: "ensure assets are precompiled"
        ansible.builtin.shell: nix-shell --run 'dotenv rails assets:precompile'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"

    when: koala_updated
    become: true
    become_user: "koala"

  - name: "add credentials for oauth application"
    ansible.builtin.command: nix-shell --run 'dotenv rails oauthproxy:create_application'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"

  become: true
  become_user: "koala"

- block:
  - name: "place koala's nginx configuration"
    ansible.builtin.template:
      src: "nginx.conf.j2"
      dest: "/etc/nginx/sites-available/koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  - name: "enable koala's nginx config"
    ansible.builtin.file:
      src: "/etc/nginx/sites-available/{{ filename }}"
      path: "/etc/nginx/sites-enabled/{{ filename }}"
      state: "link"
    vars:
      filename: "koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  when: koala.server == "unicorn"


- name: "flush handlers"
  ansible.builtin.meta: "flush_handlers"

# Disables maintenance mode only when Koala had to be updated, and can now be
# started again.
- name: "start process of disabling koala's maintenance mode"
  ansible.builtin.include_tasks: "maintenance-off.yml"
  when: koala_updated

- name: "ensure koala's timers are started and enabled in production"
  ansible.builtin.service:
    name: "{{ item }}"
    enabled:
      "{% if 'staging' in group_names %}false{% else %}true\
      {% endif %}"
    state:
      "{% if 'staging' in group_names %}stopped{% else %}started{% endif %}"
  with_items:
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.timer"
    - "koala-status-mail.timer"
    - "koala-payment-mail.timer"

- name: "ensure sidekiq service is started and enabled"
  ansible.builtin.service:
    name: "sidekiq.service"
    enabled: "yes"
    state: "started"

- name: "ensure koala update marker is absent"
  ansible.builtin.file:
    path: "/home/koala/.KOALA_MIGRATION_PENDING"
    state: "absent"
