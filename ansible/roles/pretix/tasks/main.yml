---
- name: "ensure pretix user is present"
  ansible.builtin.user:
    name: "pretix"
    home: "/var/www/pretix"
    system: true

- name: "ensure dependencies are present"
  ansible.builtin.apt:
    name:
      - "git"
      - "build-essential"
      - "python-dev"
      - "python3-virtualenv"
      - "python3"
      - "python3-pip"
      - "python3-dev"
      - "libxml2-dev"
      - "libxslt1-dev"
      - "libffi-dev"
      - "zlib1g-dev"
      - "libssl-dev"
      - "gettext"
      - "libpq-dev"
      - "libjpeg-dev"
    state: "present"

- name: "setup Pretix database"
  become_user: "postgres"
  become: true
  block:
  - name: "ensure Pretix database user exists"
    community.postgresql.postgresql_user:
      name: "pretix"
      state: "present"

  - name: "ensure database exists"
    community.postgresql.postgresql_db:
      name: "pretix"
      owner: "pretix"
      state: "present"
    notify: "pretix post-upgrade"

- name: "ensure pretix config directories are present"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    owner: "pretix"
    group: "pretix"
  with_items:
    - "/etc/pretix"
    - "/var/www/pretix/data/media"

- name: "place pretix config file"
  ansible.builtin.template:
    src: "pretix.cfg.j2"
    dest: "/etc/pretix/pretix.cfg"
    owner: "pretix"
    group: "pretix"
    mode: "0600"
  notify: "restart pretix"

- name: "create virtualenv if not exists, update pip and tools"
  ansible.builtin.pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    virtualenv: "/var/www/pretix/venv"
    virtualenv_python: "python3.8"
    state: "present"
  with_items:
    # Change in pip's dependency resolver after 24.0 causes installation of pretix to fail
    - name: pip
      version: "24.0"
    - name: "setuptools"
      version: "latest"
    - name: "wheel"
      version: "latest"
  become: true
  become_user: "pretix"

- name: "place pretix's service files"
  ansible.builtin.template:
    src: "systemd/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "pretix-web.service"
    - "pretix-worker.service"
    - "pretix-runperiodic.service"
    - "pretix-runperiodic.timer"
  notify:
    - "systemctl daemon-reload"
    - "restart pretix"

- name: "install pretix"
  ansible.builtin.pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    state: "present"
    virtualenv: "/var/www/pretix/venv"
    virtualenv_python: "python3.9"

  with_items:
    - name: "gunicorn"
      version: "20.1.0"
    - name: "pretix"
      version: "4.8.0"
    - name: "pretix-pages"
      version: "1.4.1"
    - name: "pretix-mollie"
      version: "1.3.2"
    - name: "pretix-fontpack-free"
      version: "1.7.0"
    - name: "psycopg2"
      version: "2.9.3"
    - name: "django-mysql"
      version: "4.5.0"
  notify:
    - "pretix post-upgrade"
    - "restart pretix"
  become: true
  become_user: "pretix"

- name: "Ensure daemon is reloaded"
  ansible.builtin.meta: "flush_handlers"

- name: "ensure pretix services are running and enabled"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "started"
    enabled: "yes"
  with_items:
    - "pretix-web.service"
    - "pretix-worker.service"
    - "pretix-runperiodic.timer"

# Maintenance directory, create if maintenance mode
- name: "ensure pretix maintenance mode directory is present"
  when: secret_pretix.pretix_maintenance_mode
  ansible.builtin.file:
    path: "/var/www/pretix-maintenance"
    state: "directory"
    owner: "pretix"
    group: "pretix"

# Maintenance directory, remove if not maintenance mode
- name: "ensure pretix maintenance mode directory is present"
  when: not secret_pretix.pretix_maintenance_mode
  ansible.builtin.file:
    path: "/var/www/pretix-maintenance"
    state: "absent"
    owner: "pretix"
    group: "pretix"

# Maintenance mode page
- name: "Place Maintenance page if maintenance mode is enabled"
  when: secret_pretix.pretix_maintenance_mode
  ansible.builtin.template:
    owner: "pretix"
    group: "pretix"
    src: "pretix_maintenance.html.j2"
    dest: "/var/www/pretix-maintenance/pretix-maintenance.html"

# Maintenance nginx configuration
- name: "place pretix's maintenace nginx configuration"
  when: secret_pretix.pretix_maintenance_mode
  ansible.builtin.template:
    src: "pretix_maintenance.conf.j2"
    dest: "/etc/nginx/sites-available/{{ dest_filename }}"
  vars:
    dest_filename: "pretix.{{ canonical_hostname }}.conf"
  notify: "reload nginx"

# Regular nginx configuration
- name: "place pretix's nginx configuration"
  when: not secret_pretix.pretix_maintenance_mode
  ansible.builtin.template:
    src: "pretix.conf.j2"
    dest: "/etc/nginx/sites-available/{{ dest_filename }}"
  vars:
    dest_filename: "pretix.{{ canonical_hostname }}.conf"
  notify: "reload nginx"

# Does either maintenance mode or regular mode
- name: "enable pretix's nginx configuration"
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ filename }}"
    dest: "/etc/nginx/sites-enabled/{{ filename }}"
    state: "link"
  vars:
    filename: "pretix.{{ canonical_hostname }}.conf"
  notify: "reload nginx"
