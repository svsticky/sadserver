---
# Contains application-agnostic database tasks
- block:
  - name: "ensure mariadb is installed and manageable"
    apt:
        name: "{{ item }}"
        state: "present"
    with_items:
        - "mariadb-server"
        - "python-mysqldb"
    tags:
        - "packages"

  - name: "ensure database is enabled and running"
    service:
        name: "mysql"
        enabled: true
        state: "started"
    tags:
        - "service"

  - name: "check if mysql root password has already been set"
    stat:
      path: "/root/.my.cnf"
    register: mysql_root_password_existence

  # Only set password when it hasn't been set yet, because changing the
  # password would not work at this moment.
  - name: "generate and set database root password if not set"
    mysql_user:
      name: "root"
      password: "{{ secret_mysql.root_password }}"
    when: mysql_root_password_existence.stat.exists == False

  - name: "ensure /root/.my.cnf is present and correct"
    template:
      src: "templates/root/.my.cnf.j2"
      dest: "/root/.my.cnf"
      mode: "0700"

  - name: "only allow mysql_native_password auth plugin"
    command: 'mysql -NBe "{{ item }}" -u "root" -p"{{ secret_mysql.root_password }}"'
    with_items:
      - "UPDATE mysql.user SET plugin='mysql_native_password' WHERE User='root';"
      - "FLUSH PRIVILEGES"
    changed_when: false

  - name: "ensure remote root and anonymous login is disallowed"
    command: 'mysql -NBe "{{ item }}" -u "root" -p"{{ secret_mysql.root_password }}"'
    with_items:
      - "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
      - "DELETE FROM mysql.user WHERE User='';"
      - "FLUSH PRIVILEGES"
    changed_when: false

  - name: "ensure the 'test' database does not exist"
    mysql_db:
      name: "test"
      state: "absent"
      login_user: "root"
      login_password: "{{ secret_mysql.root_password }}"

    # NOTE: mysql_db and mysql_user are preview modules, and may not be
    # backward compatible.
  - name: "create website databases"
    mysql_db:
      name: "{{ item.database }}"
      state: "present"
      login_user: "root"
      login_password: "{{ secret_mysql.root_password }}"
    with_items: "{{ websites }}"
    when: item.database is defined

  - name: "create website database users"
    mysql_user:
      name: "{{ item.database }}"
      # Using the bracket syntax to refer to the dict, in order to dynamically construct variable names.
      # Link: https://stackoverflow.com/questions/40774205/ansible-nested-variables-in-template
      password: "[secret_mysql][item.database + '_password']"
      priv: "{{ item.database }}.*:ALL"
      state: "present"
      login_user: "root"
      login_password: "{{ secret_mysql.root_password }}"
    with_items: "{{ websites }}"
    when: item.database is defined

  tags:
    - "database"
