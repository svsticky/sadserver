---
# Contains all koala-specific tasks
- block:
  - name: "ensure koala system user exists"
    user:
      name: "koala"
      state: "present"
      system: true
      shell: "/bin/bash"
    tags:
      - "ruby"
      - "koala"

  - name: "ensure koala database user exists"
    command: >
      mysql -NBe 'grant all privileges on koala.* to
      `koala`@`localhost` identified via mysql_native_password
      using "{{ secret_mysql.koala.hash }}";'
    tags:
      - "database"
      - "koala"

  - name: "ensure clone location exists and is owned by koala"
    file:
      path: "/var/www/koala.{{ canonical_hostname }}"
      state: "directory"
      owner: "koala"
      group: "koala"
      recurse: true
    tags:
      - "koala"

  - name: "ensure ruby compilation dependencies are installed"
    apt:
      name: "{{ item }}"
      state: "present"
    with_items:
      - "autoconf"
      - "bison"
      - "build-essential"
      - "libssl-dev"
      - "libyaml-dev"
      - "libreadline-dev"
      - "libncurses5-dev"
      - "libffi-dev"
      - "libgdbm3"
      - "libgdbm-dev"
      - "nodejs"
      - "zlib1g-dev"
      - "imagemagick"
      - "libmariadb-client-lgpl-dev-compat"
      - "acl"
      - "git"
    tags:
      - "packages"
      - "ruby"
      - "koala"

  - name: "add apt key for yarn repository"
    apt_key:
      url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
      state: "present"

  - name: "add yarn repository"
    apt_repository:
      repo: "deb https://dl.yarnpkg.com/debian/ stable main"
      state: "present"

  - name: "install yarn"
    apt:
     name: "yarn"
     state: "present"
     update_cache: true

  - name: "ensure koala service file is present"
    template:
      src: "templates/{{ item }}.j2"
      dest: "/{{ item }}"
    with_items: "etc/systemd/system/koala.service"
    notify:
      - "systemctl daemon-reload"

  become: true

# As koala:
- block:
  - name: "ensure rbenv is installed"
    git:
      repo: "https://github.com/rbenv/rbenv.git"
      dest: "~/.rbenv"
    tags:
      - "ruby"
      - "koala"

  - name: "ensure rbenv plugins are installed"
    git:
      repo: "{{ item.url }}"
      dest: "~/.rbenv/plugins/{{ item.name }}"
    with_items:
      - { name: "ruby-build", url: "https://github.com/rbenv/ruby-build.git" }
      - { name: "rbenv-vars", url: "https://github.com/rbenv/rbenv-vars.git" }
      # NOTE: This will install the latest development versions, should we pin
      # a tag/commit/release?
    tags:
      - "ruby"
      - "koala"

  - name: "ensure environment variables are set in .bashrc"
    blockinfile:
      dest: "/home/koala/.bashrc"
      insertafter: "EOF"
      create: true
      block: |
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init -)"
    tags:
      - "koala"
      - "ruby"

  - name: "ensure ruby is installed, compile if necessary"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; rbenv install {{ koala.ruby_version }}'
    args:
      executable: "/bin/bash"
      creates: "/home/koala/.rbenv/versions/{{ koala.ruby_version }}"
    tags:
      - "ruby"
      - "koala"

  - name: "ensure bundler is installed"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init -)"; rbenv shell {{ koala.ruby_version }}; gem install bundler'
    args:
      executable: "/bin/bash"
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      creates: "/home/koala/.rbenv/versions/{{ koala.ruby_version }}/lib/ruby/gems/{{ koala.ruby_version }}/gems/bundler-*"
    tags:
      - "ruby"
      - "koala"

  - name: "ensure koala has a ssh directory"
    file:
      path: "~/.ssh"
      state: "directory"
    tags:
      - "koala"

  - name: "copy deploy key (private) for user koala"
    copy:
      content: "{{ secret_deploy_key }}"
      dest: "/home/koala/.ssh/id_ed25519"
      mode: "0600"

  - name: "copy deploy key (public) for user koala"
    template:
      src: "templates/home/ansible/.ssh/{{ item.from }}.j2"
      dest: "/home/koala/.ssh/{{ item.to }}"
      mode: "0600"
    with_items:
      - { from: "deploy_ed25519.pub", to: "id_ed25519.pub" }

  - name: "check status of koala's local git repo"
    git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      clone: false
      update: false
    register: "koala_checkout_result"

  - name: "set status of koala repo in fact"
    set_fact:
      koala_updated: true
    when:
      # List is evaluated as logical AND
      - koala_checkout_result.changed
      - koala_checkout_result.before != None

  - include: "playbooks/.koala-maintenance-on.yml"
    when: koala_updated | default(false)

  - name: "clone koala to /var/www/koala.{{ canonical_hostname }}"
    git:
      repo: "git@github.com:svsticky/constipated-koala.git"
      dest: "/var/www/koala.{{ canonical_hostname }}"
      version: "{{ koala.git_ref }}"
    when: koala_checkout_result.changed
    tags:
      - "koala"

  - name: "ensure .rbenv-vars is present"
    template:
      src: "templates/var/www/koala/.rbenv-vars.j2"
      dest: "/var/www/koala.{{ canonical_hostname }}/.rbenv-vars"
      mode: "0700"
    tags:
      - "koala"

  - name: "ensure gem dependencies are installed"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; bundle install'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "koala_gem_result"
    changed_when: "'Installing' in koala_gem_result.stdout"
    tags:
      - "koala"

  - name: "ensure tmp directories exist"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; rails tmp:create'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
      creates: "/var/www/koala.{{ canonical_hostname }}/tmp"
    tags:
      - "koala"

  - name: "ensure log directory exists"
    file:
      dest: "/var/www/koala.{{ canonical_hostname }}/log"
      state: "directory"
      mode: "0775"
    tags:
      - "koala"

  - name: "ensure assets are precompiled"
    environment:
      PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
    shell: 'eval "$(rbenv init - )"; rails assets:precompile'
    args:
      chdir: "/var/www/koala.{{ canonical_hostname }}"
    register: "koala_assets_result"
    changed_when: koala_assets_result.stdout.find("Already up-to-date.") == -1

    # Process update
  - block:

      - name: "determine backup destination"
        set_fact:
          koala_backup_dest: >
            /home/koala/koala-database-preupgrade-{{
            ansible_date_time.date }}T{{ ansible_date_time.hour
            }}{{ ansible_date_time.minute }}.sql

        # /home/koala/koala-database-upgrade-YYYY-MM-DDTHHmm.sql

      - name: "make database backup"
        mysql_db:
          db: "koala"
          state: "dump"
          target: "{{ koala_backup_dest }}"
          login_user: "koala"
          login_password: "{{ secret_mysql.koala.password }}"

      - name: "get the backup"
        fetch:
          src: "{{ koala_backup_dest }}"
          dest: "koala-backups/"
          flat: true

      - name: "run migration(s)"
        environment:
          PATH: "/home/koala/.rbenv/bin:{{ ansible_env.PATH }}"
        shell: 'eval "$(rbenv init - )"; bin/rails RAILS_ENV={{ koala.environment }} db:migrate'
        args:
          chdir: "/var/www/koala.{{ canonical_hostname }}"
          executable: "/bin/bash"

    when: koala_updated | default(false)
    become: true
    become_user: "koala"

  - include: "playbooks/.koala-maintenance-off.yml"
    when: koala_updated | default(false)

  become: true
  become_user: "koala"

- name: "ensure koala's recurring services+timers are present"
  template:
    src: "templates/etc/systemd/system/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "koala-check-study-year.service"
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.service"
    - "koala-clean-users-table.timer"
    - "koala-reindex-search.service"
    - "koala-reindex-search.timer"
    - "koala-rake-fail@.service"
  notify:
    - "systemctl daemon-reload"

- name: "ensure koala's timers are started and enabled in production"
  service:
    name: "{{ item }}"
    enabled: "{% if staging %}false{% else %}true{% endif %}"
    state: "{% if staging %}stopped{% else %}started{% endif %}"
  with_items:
    - "koala-check-study-year.timer"
    - "koala-clean-users-table.timer"
    - "koala-reindex-search.timer"

- block:
  - name: "ensure webrick script is present in development"
    template:
      src: "templates/{{ item }}.j2"
      dest: "/{{ item }}"
      mode: "0755"
      owner: "koala"
      group: "koala"
    with_items: "home/koala/webrick.sh"

  - name: "ensure webrick service file is present in development"
    template:
      src: "templates/{{ item }}.j2"
      dest: "/{{ item }}"
    with_items: "etc/systemd/system/webrick.service"
    notify:
      - "systemctl daemon-reload"

  when: koala.server == "webrick"
  tags:
    - "koala"

- block:
  - name: "ensure unicorn script is present in production"
    template:
      src: "templates/{{ item }}.j2"
      dest: "/{{ item }}"
      mode: "0755"
      owner: "koala"
      group: "koala"
    with_items: "home/koala/unicorn.sh"

  - name: "place koala's nginx configuration"
    template:
      src: "templates/etc/nginx/sites-available/koala.j2"
      dest: "/etc/nginx/sites-available/koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  - name: "enable koala's nginx config"
    file:
      src: "/etc/nginx/sites-available/{{ item }}"
      dest: "/etc/nginx/sites-enabled/{{ item }}"
      state: "link"
    with_items: "koala.{{ canonical_hostname }}.conf"
    notify: "reload nginx"

  when: koala.server == "unicorn"
  tags:
    - "koala"
